#!/bin/sh

if [ -z "${LIBAROMA_BASE}" ]; then
	echo "Libaroma environment not set, please run envsetup.sh first."
	exit
fi

if [ -z "$1" ] || [ "$1" = "/?" ] || [ "$1" = "-h" ] || [ "$1" = "--help" ]; then
	aromahelp $(basename "$0")
	exit
fi

for lib in aroma aromart drm freetype hb jpeg minui minzip png squirrel ucdn zlib
do
	# if folder doesn't exist because it's not needed, ignore the warning
	if [ ! -d "${LIBAROMA_BASE}/out/libs/${LIBAROMA_TARGET_NAME}/$l/" ]; then
		should_build=1
		if [ "$lib" = "aromart" ] && [ "${LIBAROMA_BUILD_RUNTIME}" = "0" ]; then
		should_build=0
		elif [ "$lib" = "drm" ] && [ "${LIBAROMA_BUILD_DRM}" = "0" ]; then
		should_build=0
		elif [ "$lib" = "hb" ]; then
			if [ "${LIBAROMA_BUILD_HARFBUZZ}" = "0" ]; then
				should_build=0
			else
				lib="harfbuzz"
			fi
		elif [ "$lib" = "jpeg" ] && [ "${LIBAROMA_BUILD_JPEG}" = "0" ]; then
		should_build=0
		elif [ "$lib" = "minui" ] && [ "${LIBAROMA_BUILD_MINUI}" = "0" ]; then
		should_build=0
		elif [ "$lib" = "squirrel" ] && [ "${LIBAROMA_BUILD_RUNTIME}" = "0" ]; then
		should_build=0
		fi
		if [ "${should_build}" = "1" ]; then
			#if library $l is not found and is needed, try to build it
			if [ "$lib" = "aroma" ]; then
				sh "${LIBAROMA_BASE}/tools/linux/mkaroma nodetect"
			elif [ "$lib" = "aromart" ]; then
				sh "${LIBAROMA_BASE}/tools/linux/mkaromart"
			else
				sh "${LIBAROMA_BASE}/tools/linux/mkalibs" $lib
			fi
		fi
	fi
done

olddir=$(pwd)
cd "${LIBAROMA_BASE}/out/libs/${LIBAROMA_TARGET_NAME}/aroma"

if [ ! -d "${LIBAROMA_BASE}/apps/" ]; then
	echo "Apps folder not found, cannot find app source"
	cd "${olddir}"
	exit
fi

if [ ! -d "${LIBAROMA_BASE}/apps/$1/" ]; then
	echo "Source for <$1> not found"
	cd "${olddir}"
	exit
fi

#fill obj paths with wildcards (nicer than Windows :D)
if [ "${LIBAROMA_BUILD_DRM}" = "1" ]; then
	drm_objs="${LIBAROMA_BASE}/out/libs/${LIBAROMA_TARGET_NAME}/drm/"
fi
if [ "${LIBAROMA_BUILD_HARFBUZZ}" = "1" ]; then
	hb_objs="${LIBAROMA_BASE}/out/libs/${LIBAROMA_TARGET_NAME}/hb/"
fi
if [ "${LIBAROMA_BUILD_JPEG}" = "1" ]; then
	jpeg_objs="${LIBAROMA_BASE}/out/libs/${LIBAROMA_TARGET_NAME}/jpeg/"
fi
if [ "${LIBAROMA_BUILD_MINUI}" = "1" ]; then
	minui_objs="${LIBAROMA_BASE}/out/libs/${LIBAROMA_TARGET_NAME}/minui/"
fi
if [ "${LIBAROMA_BUILD_RUNTIME}" = "1" ]; then
	aromart_objs="${LIBAROMA_BASE}/out/libs/${LIBAROMA_TARGET_NAME}/aromart/"
fi

# parse sourcelist.txt
# This allows to build files with C files in subdirectories
# by default, this script just compiles *.c on apps/<appname>)

if [ -e "${LIBAROMA_BASE}/apps/$1/sourcelist.txt" ]; then
	echo "Parsing additional sources"
	for line in $(cat "${LIBAROMA_BASE}/apps/$1/sourcelist.txt")
	do
		# here relative paths are used because of the headache it was to handle spaced paths
		app_files="${app_files} ../../../../apps/$1/${line%%$(printf '\r')}"
	done
fi

if [ ! -d "${LIBAROMA_BASE}/out/bin" ]; then
	mkdir -p "${LIBAROMA_BASE}/out/bin"
fi

echo "Building $1${LIBAROMA_DEBUG_SUFFIX} for ${LIBAROMA_ARCH} ${LIBAROMA_ARCH_APPEND}"
target_name=$1-${LIBAROMA_TARGET_NAME}

"${LIBAROMA_GCC}" \
  ${LIBAROMA_APP_STATIC} \
  -fdata-sections -ffunction-sections -Wl,--gc-sections \
  -fPIC -DPIC ${LIBAROMA_STRIP_OBJECT} \
  \
  ${LIBAROMA_CFLAGS} \
  \
  -DLIBAROMA_CONFIG_DEBUG=${LIBAROMA_CONFIG_DEBUG} \
  -DLIBAROMA_CONFIG_DEBUG_FILE=${LIBAROMA_CONFIG_DEBUG_FILE} \
  -DLIBAROMA_CONFIG_DEBUG_MEMORY=${LIBAROMA_CONFIG_DEBUG_MEMORY} \
  -DLIBAROMA_CONFIG_COMPILER_MESSAGE=${LIBAROMA_CONFIG_COMPILER_MESSAGE} \
  -DLIBAROMA_CONFIG_SHMEMFB=${LIBAROMA_CONFIG_SHMEMFB} \
	\
	"${drm_objs}"*.o \
	"${hb_objs}"*.o \
	"${jpeg_objs}"*.o \
	"${minui_objs}"*.o \
	"${aromart_objs}"*.o \
	"${LIBAROMA_BASE}/out/libs/${LIBAROMA_TARGET_NAME}/freetype/"*.o \
	"${LIBAROMA_BASE}/out/libs/${LIBAROMA_TARGET_NAME}/minzip/"*.o \
	"${LIBAROMA_BASE}/out/libs/${LIBAROMA_TARGET_NAME}/png/"*.o \
	"${LIBAROMA_BASE}/out/libs/${LIBAROMA_TARGET_NAME}/ucdn/"*.o \
	"${LIBAROMA_BASE}/out/libs/${LIBAROMA_TARGET_NAME}/zlib/"*.o \
	"${LIBAROMA_BASE}/out/libs/${LIBAROMA_TARGET_NAME}/aroma/"*.o \
	"${LIBAROMA_BASE}/apps/$1"/*.c \
	${app_files} \
	\
  -I"${LIBAROMA_BASE}/include" \
  -I"${LIBAROMA_BASE}/libs/selinux/include" \
  -I"${LIBAROMA_BASE}/src" \
  -I"${LIBAROMA_BASE}/apps/$1" \
  -o "${LIBAROMA_BASE}/out/bin/${target_name}" \
  \
  -lm -lpthread -lstdc++ -lrt ${LIBAROMA_ADDITIONAL_LIBS}

cd "${olddir}"
